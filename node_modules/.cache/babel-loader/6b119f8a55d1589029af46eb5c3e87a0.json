{"ast":null,"code":"import React, { useRef, useEffect, useState, useCallback, useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport lottie from 'lottie-web';\nimport * as lottieConstants from './lottieConstants';\nconst propTypes = {\n  id: PropTypes.string,\n  options: PropTypes.object,\n  className: PropTypes.string,\n  eventListeners: PropTypes.arrayOf(PropTypes.object),\n  playingState: PropTypes.oneOf([lottieConstants.PLAY, lottieConstants.PAUSE, lottieConstants.STOP]),\n  direction: PropTypes.oneOf([lottieConstants.directionForward, lottieConstants.directionReverse]),\n  speed: PropTypes.number,\n  goToAndPlay: PropTypes.object,\n  playSegments: PropTypes.object\n};\n\nfunction Lottie(props) {\n  const {\n    id,\n    options,\n    eventListeners,\n    playingState,\n    className,\n    direction,\n    speed,\n    goToAndPlay,\n    playSegments\n  } = props;\n  const [lottieInstance, setLottieInstance] = useState(null);\n  const [lottieConfig, setLottieConfig] = useState(null);\n  const lottieContainer = useRef(null);\n  const [isAnimationMissing, setAnimationMissing] = useState(false);\n  const [lottieOptions, dispatch] = useReducer(setLottieOptions, {});\n\n  function setLottieOptions(state, action) {\n    //useReducer is required to compare incoming props with previous props\n    //useEffect is rendered with every state change and compares changes in props by both reference and value\n    //We need to update lottieOptions only when the options have changed by value so that we can can create a lottie instance only when there is a change in options\n    let isOptionsChanged = !lottieConstants.checkObjectsEqualByValue(action.newOptions, state);\n\n    if (isOptionsChanged) {\n      if (!action.newOptions.path && !action.newOptions.animationData) {\n        setAnimationMissing(true);\n      } else {\n        setAnimationMissing(false);\n      }\n\n      if ((state.path || state.animationData) && lottieInstance) {\n        //Before returning options for new instance destroy the previous instance\n        lottieInstance.destroy();\n      }\n\n      return action.newOptions;\n    } else {\n      return state;\n    }\n  }\n\n  useEffect(() => {\n    dispatch({\n      newOptions: options\n    });\n  }, [options]);\n  useEffect(() => {\n    if (lottieOptions && (lottieOptions.animationData || lottieOptions.path)) {\n      let newConfig = { ...lottieOptions,\n        container: lottieContainer.current\n      };\n\n      if (newConfig.path) {\n        //If path defined then ignore animationData provided\n        delete newConfig.animationData;\n      }\n\n      setLottieConfig(newConfig);\n    }\n  }, [lottieOptions]); //Initialise animation\n\n  useEffect(() => {\n    if (lottieConfig && lottieConfig.container) {\n      const newInstance = lottie.loadAnimation(lottieConfig);\n      setLottieInstance(newInstance);\n    }\n  }, [lottieConfig]); // Remove listeners if any added when initialised\n\n  const removeEventListeners = useCallback(() => {\n    if (lottieInstance) {\n      eventListeners.forEach(eventListener => {\n        lottieInstance.removeEventListener(eventListener.eventName, eventListener.callback);\n      }); //Destroy lottieInstance once all listeners have been removed\n\n      return () => lottieInstance.destroy();\n    }\n  }, [lottieInstance, eventListeners]); // Add listeners if any passed to props\n\n  const addEventListeners = useCallback(() => {\n    if (lottieInstance && eventListeners) {\n      eventListeners.forEach(eventListener => {\n        lottieInstance.addEventListener(eventListener.eventName, eventListener.callback);\n      });\n    }\n  }, [eventListeners, lottieInstance]);\n  useEffect(() => {\n    addEventListeners(); //Equivalent to component will unmount.\n\n    return () => removeEventListeners();\n  }); //Watch for state change of animation\n\n  useEffect(() => {\n    if (lottieInstance) {\n      if (playingState === lottieConstants.PLAY) {\n        lottieInstance.play();\n      } else if (playingState === lottieConstants.PAUSE) {\n        lottieInstance.pause();\n      } else if (playingState === lottieConstants.STOP) {\n        lottieInstance.stop();\n      }\n    }\n  }, [playingState, lottieInstance]); //Watch direction change\n\n  useEffect(() => {\n    if (lottieInstance && direction && (direction === lottieConstants.directionForward || lottieConstants.directionReverse)) {\n      lottieInstance.setDirection(direction);\n    }\n  }, [direction, lottieInstance]); //Watch speed change\n\n  useEffect(() => {\n    if (lottieInstance && speed) {\n      lottieInstance.setSpeed(speed);\n    }\n  }, [speed, lottieInstance]); //Jump to play from specific time/segment\n\n  useEffect(() => {\n    if (lottieInstance && goToAndPlay && goToAndPlay.value && goToAndPlay.isFrame) {\n      lottieInstance.goToAndPlay(goToAndPlay.value, goToAndPlay.isFrame);\n    }\n  }, [goToAndPlay, lottieInstance]); //Play specific segments\n\n  useEffect(() => {\n    if (lottieInstance && playSegments && playSegments.segments && playSegments.forceFlag) {\n      lottieInstance.playSegments(playSegments.segments, playSegments.forceFlag);\n    }\n  }, [playSegments, lottieInstance]); //Container for animation\n\n  return React.createElement(\"div\", {\n    id: id,\n    ref: lottieContainer,\n    className: className\n  }, isAnimationMissing && React.createElement(\"p\", null, lottieConstants.animationMissing));\n}\n\nconst defaultOptions = {\n  renderer: 'svg',\n  loop: false,\n  autoplay: false,\n  path: lottieConstants.examplePath,\n  // the animation data\n  rendererSettings: {\n    preserveAspectRatio: 'xMinYMin slice' // Supports the same options as the svg element's preserveAspectRatio property\n\n  }\n};\nLottie.propTypes = propTypes;\nLottie.defaultProps = {\n  id: 'lottie-web-react',\n  options: defaultOptions,\n  eventListeners: [],\n  playingState: lottieConstants.STOP,\n  direction: 1,\n  speed: 1,\n  goToAndPlay: null,\n  playSegments: null\n};\nexport default Lottie;","map":{"version":3,"sources":["/Users/ridgereventar/Projects/nextgen/node_modules/lottie-web-react/dist/index.js"],"names":["React","useRef","useEffect","useState","useCallback","useReducer","PropTypes","lottie","lottieConstants","propTypes","id","string","options","object","className","eventListeners","arrayOf","playingState","oneOf","PLAY","PAUSE","STOP","direction","directionForward","directionReverse","speed","number","goToAndPlay","playSegments","Lottie","props","lottieInstance","setLottieInstance","lottieConfig","setLottieConfig","lottieContainer","isAnimationMissing","setAnimationMissing","lottieOptions","dispatch","setLottieOptions","state","action","isOptionsChanged","checkObjectsEqualByValue","newOptions","path","animationData","destroy","newConfig","container","current","newInstance","loadAnimation","removeEventListeners","forEach","eventListener","removeEventListener","eventName","callback","addEventListeners","addEventListener","play","pause","stop","setDirection","setSpeed","value","isFrame","segments","forceFlag","createElement","ref","animationMissing","defaultOptions","renderer","loop","autoplay","examplePath","rendererSettings","preserveAspectRatio","defaultProps"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState, useCallback, useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport lottie from 'lottie-web';\nimport * as lottieConstants from './lottieConstants';\nconst propTypes = {\n  id: PropTypes.string,\n  options: PropTypes.object,\n  className: PropTypes.string,\n  eventListeners: PropTypes.arrayOf(PropTypes.object),\n  playingState: PropTypes.oneOf([lottieConstants.PLAY, lottieConstants.PAUSE, lottieConstants.STOP]),\n  direction: PropTypes.oneOf([lottieConstants.directionForward, lottieConstants.directionReverse]),\n  speed: PropTypes.number,\n  goToAndPlay: PropTypes.object,\n  playSegments: PropTypes.object\n};\n\nfunction Lottie(props) {\n  const {\n    id,\n    options,\n    eventListeners,\n    playingState,\n    className,\n    direction,\n    speed,\n    goToAndPlay,\n    playSegments\n  } = props;\n  const [lottieInstance, setLottieInstance] = useState(null);\n  const [lottieConfig, setLottieConfig] = useState(null);\n  const lottieContainer = useRef(null);\n  const [isAnimationMissing, setAnimationMissing] = useState(false);\n  const [lottieOptions, dispatch] = useReducer(setLottieOptions, {});\n\n  function setLottieOptions(state, action) {\n    //useReducer is required to compare incoming props with previous props\n    //useEffect is rendered with every state change and compares changes in props by both reference and value\n    //We need to update lottieOptions only when the options have changed by value so that we can can create a lottie instance only when there is a change in options\n    let isOptionsChanged = !lottieConstants.checkObjectsEqualByValue(action.newOptions, state);\n\n    if (isOptionsChanged) {\n      if (!action.newOptions.path && !action.newOptions.animationData) {\n        setAnimationMissing(true);\n      } else {\n        setAnimationMissing(false);\n      }\n\n      if ((state.path || state.animationData) && lottieInstance) {\n        //Before returning options for new instance destroy the previous instance\n        lottieInstance.destroy();\n      }\n\n      return action.newOptions;\n    } else {\n      return state;\n    }\n  }\n\n  useEffect(() => {\n    dispatch({\n      newOptions: options\n    });\n  }, [options]);\n  useEffect(() => {\n    if (lottieOptions && (lottieOptions.animationData || lottieOptions.path)) {\n      let newConfig = { ...lottieOptions,\n        container: lottieContainer.current\n      };\n\n      if (newConfig.path) {\n        //If path defined then ignore animationData provided\n        delete newConfig.animationData;\n      }\n\n      setLottieConfig(newConfig);\n    }\n  }, [lottieOptions]); //Initialise animation\n\n  useEffect(() => {\n    if (lottieConfig && lottieConfig.container) {\n      const newInstance = lottie.loadAnimation(lottieConfig);\n      setLottieInstance(newInstance);\n    }\n  }, [lottieConfig]); // Remove listeners if any added when initialised\n\n  const removeEventListeners = useCallback(() => {\n    if (lottieInstance) {\n      eventListeners.forEach(eventListener => {\n        lottieInstance.removeEventListener(eventListener.eventName, eventListener.callback);\n      }); //Destroy lottieInstance once all listeners have been removed\n\n      return () => lottieInstance.destroy();\n    }\n  }, [lottieInstance, eventListeners]); // Add listeners if any passed to props\n\n  const addEventListeners = useCallback(() => {\n    if (lottieInstance && eventListeners) {\n      eventListeners.forEach(eventListener => {\n        lottieInstance.addEventListener(eventListener.eventName, eventListener.callback);\n      });\n    }\n  }, [eventListeners, lottieInstance]);\n  useEffect(() => {\n    addEventListeners(); //Equivalent to component will unmount.\n\n    return () => removeEventListeners();\n  }); //Watch for state change of animation\n\n  useEffect(() => {\n    if (lottieInstance) {\n      if (playingState === lottieConstants.PLAY) {\n        lottieInstance.play();\n      } else if (playingState === lottieConstants.PAUSE) {\n        lottieInstance.pause();\n      } else if (playingState === lottieConstants.STOP) {\n        lottieInstance.stop();\n      }\n    }\n  }, [playingState, lottieInstance]); //Watch direction change\n\n  useEffect(() => {\n    if (lottieInstance && direction && (direction === lottieConstants.directionForward || lottieConstants.directionReverse)) {\n      lottieInstance.setDirection(direction);\n    }\n  }, [direction, lottieInstance]); //Watch speed change\n\n  useEffect(() => {\n    if (lottieInstance && speed) {\n      lottieInstance.setSpeed(speed);\n    }\n  }, [speed, lottieInstance]); //Jump to play from specific time/segment\n\n  useEffect(() => {\n    if (lottieInstance && goToAndPlay && goToAndPlay.value && goToAndPlay.isFrame) {\n      lottieInstance.goToAndPlay(goToAndPlay.value, goToAndPlay.isFrame);\n    }\n  }, [goToAndPlay, lottieInstance]); //Play specific segments\n\n  useEffect(() => {\n    if (lottieInstance && playSegments && playSegments.segments && playSegments.forceFlag) {\n      lottieInstance.playSegments(playSegments.segments, playSegments.forceFlag);\n    }\n  }, [playSegments, lottieInstance]); //Container for animation\n\n  return React.createElement(\"div\", {\n    id: id,\n    ref: lottieContainer,\n    className: className\n  }, isAnimationMissing && React.createElement(\"p\", null, lottieConstants.animationMissing));\n}\n\nconst defaultOptions = {\n  renderer: 'svg',\n  loop: false,\n  autoplay: false,\n  path: lottieConstants.examplePath,\n  // the animation data\n  rendererSettings: {\n    preserveAspectRatio: 'xMinYMin slice' // Supports the same options as the svg element's preserveAspectRatio property\n\n  }\n};\nLottie.propTypes = propTypes;\nLottie.defaultProps = {\n  id: 'lottie-web-react',\n  options: defaultOptions,\n  eventListeners: [],\n  playingState: lottieConstants.STOP,\n  direction: 1,\n  speed: 1,\n  goToAndPlay: null,\n  playSegments: null\n};\nexport default Lottie;"]},"metadata":{},"sourceType":"module"}